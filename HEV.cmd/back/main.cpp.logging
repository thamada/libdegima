#include "stdio.h"
#include "stdlib.h"
#include "unistd.h"

#include <time.h>
#include <sys/time.h>
#include <sys/resource.h>
double get_time(void)
{
  static struct timeval tv;
  static struct timezone tz;
  gettimeofday(&tv, &tz);
  return ((double)(tv.tv_sec  + tv.tv_usec*1.0e-6));
}

#include "DriveInformation.h"
static zmp::hev::DriveInformation drive_info;

#include "HevCnt.h"
static HevCnt* hev;


void _change_drive_mode(){
  static bool mode = false;
  if(mode == false){
    drive_info.SetMode(0x10);  // 0x00=manual, 0x10=program
    drive_info.SetServo(0x10); // 0x00=OFF, 0x10=ON
    mode = true;
  }else{
    drive_info.SetMode(0x00);  // 0x00=manual, 0x10=program
    drive_info.SetServo(0x00); // 0x00=OFF, 0x10=ON
    mode = false;
  }
}

void change_drive_mode(){
  static bool mode = false;
  if(mode == false){
    hev->SetDrvMode(MODE_PROGRAM);
    hev->SetStrMode(MODE_PROGRAM);
    mode = true;
  }else{
    hev->SetDrvMode(MODE_MANUAL);
    hev->SetStrMode(MODE_MANUAL);
    mode = false;
  }
}

int main(int argc, char *argv[]){
  double t0 = get_time();
  int cnt = 0;
  BattInf  _battInf;
  BrakeInf _brakeInf;
  DrvInf   _drvInf;
  OtherInf _otherInf;
  StrInf   _strInf;
  int      _errCode;
  int      _errLevel;

  hev = new HevCnt();
  hev->Init();
  hev->Start();
  hev->SetDrvMode(MODE_MANUAL);
  hev->SetStrMode(MODE_MANUAL);
  hev->SetDrvVeloc(0);
  hev->SetDrvStroke(0);
  hev->SetBrakeStroke(0);



  while(1){
    //    if(0 == (cnt%10000)) change_drive_mode();
    //    usleep(1000);
    hev->GetBattInf(&_battInf);
    hev->GetBrakeInf(&_brakeInf);
    hev->GetDrvInf(&_drvInf);
    hev->GetOtherInf(&_otherInf);
    hev->GetStrInf(&_strInf);
    hev->GetErrCode(&_errLevel, &_errCode);

    double t = get_time() - t0;

    printf("%08d\t%9.6f\t", cnt, t);
    printf("%3.2f\t", _strInf.angle);
    printf("%d\t%d\t", _brakeInf.pressed, _brakeInf.actualPedalStr);
    printf("%d\t", _drvInf.actualPedalStr);
    printf("%3.2f\t", _drvInf.veloc);
    printf("%3.2f\t%3.2f\t",_otherInf.sideAcc, _otherInf.acc);
    printf("0x%x\t%d\t0x%x\t0x%x\t", _otherInf.ev_mode, _otherInf.temp, _otherInf.shiftFromPrius, _otherInf.light);

    printf("\n");
    /*
    printf("%08d, %16g\n", cnt, t);

    printf("strInf: %d,%d,%d,%d,%d,%d,%3.2f,%3.2f",
	   _strInf.mode, _strInf.cont_mode, _strInf.overrideMode, _strInf.servo,
	   _strInf.targetTorque, _strInf.torque,
	   _strInf.angle, _strInf.targetAngle);
    */

/*
    printf("drvInf: %d,%d,%d,%d,%d,%d,%d,%3.2f,%3.2f,%d,%d,%d\n",
	   _drvInf.mode,
	   _drvInf.contMode,
	   _drvInf.overrideMode,
	   _drvInf.servo,
	   _drvInf.actualPedalStr,
	   _drvInf.targetPedalStr,
	   _drvInf.inputPedalStr,
	   _drvInf.targetVeloc,
	   _drvInf.veloc,
	   _drvInf.actualShift,
	   _drvInf.targetShift,
	   _drvInf.inputShift);


    printf("drvInf.veloc: %3.2f\n",_drvInf.veloc);

    printf("brakeInf: %d,%d,%d,%d\n",
	   _brakeInf.pressed,
	   _brakeInf.actualPedalStr,
	   _brakeInf.targetPedalStr,
	   _brakeInf.inputPedalStr);
*/
    cnt++;
  }
  return 0;
}
